// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content.proto

#ifndef PROTOBUF_content_2eproto__INCLUDED
#define PROTOBUF_content_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace content {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_content_2eproto();
void protobuf_AssignDesc_content_2eproto();
void protobuf_ShutdownFile_content_2eproto();

class ContentData;
class ContentPart;
class Content;
class CmdResponse;
class UpdatePart;

// ===================================================================

class ContentData : public ::google::protobuf::Message {
 public:
  ContentData();
  virtual ~ContentData();

  ContentData(const ContentData& from);

  inline ContentData& operator=(const ContentData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentData& default_instance();

  void UnsafeArenaSwap(ContentData* other);
  void Swap(ContentData* other);

  // implements Message ----------------------------------------------

  inline ContentData* New() const { return New(NULL); }

  ContentData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentData& from);
  void MergeFrom(const ContentData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentData* other);
  protected:
  explicit ContentData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.Uuid id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  void _slow_mutable_id();
  void _slow_set_allocated_id(
      ::google::protobuf::Arena* message_arena, ::common::Uuid** id);
  ::common::Uuid* _slow_release_id();
  public:
  const ::common::Uuid& id() const;
  ::common::Uuid* mutable_id();
  ::common::Uuid* release_id();
  void set_allocated_id(::common::Uuid* id);
  ::common::Uuid* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::common::Uuid* id);

  // optional string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);
  ::std::string* unsafe_arena_release_title();
  void unsafe_arena_set_allocated_title(
      ::std::string* title);

  // repeated .common.Uuid authors = 3;
  int authors_size() const;
  void clear_authors();
  static const int kAuthorsFieldNumber = 3;
  const ::common::Uuid& authors(int index) const;
  ::common::Uuid* mutable_authors(int index);
  ::common::Uuid* add_authors();
  const ::google::protobuf::RepeatedPtrField< ::common::Uuid >&
      authors() const;
  ::google::protobuf::RepeatedPtrField< ::common::Uuid >*
      mutable_authors();

  // @@protoc_insertion_point(class_scope:content.ContentData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::common::Uuid* id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::RepeatedPtrField< ::common::Uuid > authors_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();

  void InitAsDefaultInstance();
  static ContentData* default_instance_;
};
// -------------------------------------------------------------------

class ContentPart : public ::google::protobuf::Message {
 public:
  ContentPart();
  virtual ~ContentPart();

  ContentPart(const ContentPart& from);

  inline ContentPart& operator=(const ContentPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentPart& default_instance();

  void UnsafeArenaSwap(ContentPart* other);
  void Swap(ContentPart* other);

  // implements Message ----------------------------------------------

  inline ContentPart* New() const { return New(NULL); }

  ContentPart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentPart& from);
  void MergeFrom(const ContentPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentPart* other);
  protected:
  explicit ContentPart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .content.ContentData info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  void _slow_mutable_info();
  void _slow_set_allocated_info(
      ::google::protobuf::Arena* message_arena, ::content::ContentData** info);
  ::content::ContentData* _slow_release_info();
  public:
  const ::content::ContentData& info() const;
  ::content::ContentData* mutable_info();
  ::content::ContentData* release_info();
  void set_allocated_info(::content::ContentData* info);
  ::content::ContentData* unsafe_arena_release_info();
  void unsafe_arena_set_allocated_info(
      ::content::ContentData* info);

  // optional .common.Format format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  ::common::Format format() const;
  void set_format(::common::Format value);

  // optional string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // @@protoc_insertion_point(class_scope:content.ContentPart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::content::ContentData* info_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int format_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();

  void InitAsDefaultInstance();
  static ContentPart* default_instance_;
};
// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  void UnsafeArenaSwap(Content* other);
  void Swap(Content* other);

  // implements Message ----------------------------------------------

  inline Content* New() const { return New(NULL); }

  Content* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content* other);
  protected:
  explicit Content(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .content.ContentData info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  void _slow_mutable_info();
  void _slow_set_allocated_info(
      ::google::protobuf::Arena* message_arena, ::content::ContentData** info);
  ::content::ContentData* _slow_release_info();
  public:
  const ::content::ContentData& info() const;
  ::content::ContentData* mutable_info();
  ::content::ContentData* release_info();
  void set_allocated_info(::content::ContentData* info);
  ::content::ContentData* unsafe_arena_release_info();
  void unsafe_arena_set_allocated_info(
      ::content::ContentData* info);

  // repeated .content.ContentPart parts = 2;
  int parts_size() const;
  void clear_parts();
  static const int kPartsFieldNumber = 2;
  const ::content::ContentPart& parts(int index) const;
  ::content::ContentPart* mutable_parts(int index);
  ::content::ContentPart* add_parts();
  const ::google::protobuf::RepeatedPtrField< ::content::ContentPart >&
      parts() const;
  ::google::protobuf::RepeatedPtrField< ::content::ContentPart >*
      mutable_parts();

  // @@protoc_insertion_point(class_scope:content.Content)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::content::ContentData* info_;
  ::google::protobuf::RepeatedPtrField< ::content::ContentPart > parts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();

  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void UnsafeArenaSwap(CmdResponse* other);
  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse* New() const { return New(NULL); }

  CmdResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse* other);
  protected:
  explicit CmdResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);
  ::std::string* unsafe_arena_release_path();
  void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // optional .common.Level level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::common::Level level() const;
  void set_level(::common::Level value);

  // optional string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);
  ::std::string* unsafe_arena_release_msg();
  void unsafe_arena_set_allocated_msg(
      ::std::string* msg);

  // @@protoc_insertion_point(class_scope:content.CmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePart : public ::google::protobuf::Message {
 public:
  UpdatePart();
  virtual ~UpdatePart();

  UpdatePart(const UpdatePart& from);

  inline UpdatePart& operator=(const UpdatePart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePart& default_instance();

  void UnsafeArenaSwap(UpdatePart* other);
  void Swap(UpdatePart* other);

  // implements Message ----------------------------------------------

  inline UpdatePart* New() const { return New(NULL); }

  UpdatePart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePart& from);
  void MergeFrom(const UpdatePart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdatePart* other);
  protected:
  explicit UpdatePart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .content.ContentPart part = 1;
  bool has_part() const;
  void clear_part();
  static const int kPartFieldNumber = 1;
  private:
  void _slow_mutable_part();
  void _slow_set_allocated_part(
      ::google::protobuf::Arena* message_arena, ::content::ContentPart** part);
  ::content::ContentPart* _slow_release_part();
  public:
  const ::content::ContentPart& part() const;
  ::content::ContentPart* mutable_part();
  ::content::ContentPart* release_part();
  void set_allocated_part(::content::ContentPart* part);
  ::content::ContentPart* unsafe_arena_release_part();
  void unsafe_arena_set_allocated_part(
      ::content::ContentPart* part);

  // optional uint32 position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:content.UpdatePart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::content::ContentPart* part_;
  ::google::protobuf::uint32 position_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_content_2eproto();
  friend void protobuf_AssignDesc_content_2eproto();
  friend void protobuf_ShutdownFile_content_2eproto();

  void InitAsDefaultInstance();
  static UpdatePart* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentData

// optional .common.Uuid id = 1;
inline bool ContentData::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void ContentData::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::common::Uuid& ContentData::id() const {
  // @@protoc_insertion_point(field_get:content.ContentData.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::common::Uuid* ContentData::mutable_id() {
  
  if (id_ == NULL) {
    _slow_mutable_id();  }
  // @@protoc_insertion_point(field_mutable:content.ContentData.id)
  return id_;
}
inline ::common::Uuid* ContentData::release_id() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_id();
  } else {
    ::common::Uuid* temp = id_;
    id_ = NULL;
    return temp;
  }
}
inline void ContentData::set_allocated_id(::common::Uuid* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id != NULL) {
    _slow_set_allocated_id(message_arena, &id);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:content.ContentData.id)
}

// optional string title = 2;
inline void ContentData::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ContentData::title() const {
  // @@protoc_insertion_point(field_get:content.ContentData.title)
  return title_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentData::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:content.ContentData.title)
}
inline void ContentData::set_title(const char* value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:content.ContentData.title)
}
inline void ContentData::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:content.ContentData.title)
}
inline ::std::string* ContentData::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:content.ContentData.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ContentData::release_title() {
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ContentData::unsafe_arena_release_title() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ContentData::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.ContentData.title)
}
inline void ContentData::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.ContentData.title)
}

// repeated .common.Uuid authors = 3;
inline int ContentData::authors_size() const {
  return authors_.size();
}
inline void ContentData::clear_authors() {
  authors_.Clear();
}
inline const ::common::Uuid& ContentData::authors(int index) const {
  // @@protoc_insertion_point(field_get:content.ContentData.authors)
  return authors_.Get(index);
}
inline ::common::Uuid* ContentData::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:content.ContentData.authors)
  return authors_.Mutable(index);
}
inline ::common::Uuid* ContentData::add_authors() {
  // @@protoc_insertion_point(field_add:content.ContentData.authors)
  return authors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::Uuid >&
ContentData::authors() const {
  // @@protoc_insertion_point(field_list:content.ContentData.authors)
  return authors_;
}
inline ::google::protobuf::RepeatedPtrField< ::common::Uuid >*
ContentData::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:content.ContentData.authors)
  return &authors_;
}

// -------------------------------------------------------------------

// ContentPart

// optional .content.ContentData info = 1;
inline bool ContentPart::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void ContentPart::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::content::ContentData& ContentPart::info() const {
  // @@protoc_insertion_point(field_get:content.ContentPart.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::content::ContentData* ContentPart::mutable_info() {
  
  if (info_ == NULL) {
    _slow_mutable_info();  }
  // @@protoc_insertion_point(field_mutable:content.ContentPart.info)
  return info_;
}
inline ::content::ContentData* ContentPart::release_info() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_info();
  } else {
    ::content::ContentData* temp = info_;
    info_ = NULL;
    return temp;
  }
}
inline void ContentPart::set_allocated_info(::content::ContentData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info != NULL) {
    _slow_set_allocated_info(message_arena, &info);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:content.ContentPart.info)
}

// optional .common.Format format = 2;
inline void ContentPart::clear_format() {
  format_ = 0;
}
inline ::common::Format ContentPart::format() const {
  // @@protoc_insertion_point(field_get:content.ContentPart.format)
  return static_cast< ::common::Format >(format_);
}
inline void ContentPart::set_format(::common::Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:content.ContentPart.format)
}

// optional string data = 3;
inline void ContentPart::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ContentPart::data() const {
  // @@protoc_insertion_point(field_get:content.ContentPart.data)
  return data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentPart::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:content.ContentPart.data)
}
inline void ContentPart::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:content.ContentPart.data)
}
inline void ContentPart::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:content.ContentPart.data)
}
inline ::std::string* ContentPart::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:content.ContentPart.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ContentPart::release_data() {
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ContentPart::unsafe_arena_release_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ContentPart::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.ContentPart.data)
}
inline void ContentPart::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.ContentPart.data)
}

// -------------------------------------------------------------------

// Content

// optional .content.ContentData info = 1;
inline bool Content::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void Content::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::content::ContentData& Content::info() const {
  // @@protoc_insertion_point(field_get:content.Content.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::content::ContentData* Content::mutable_info() {
  
  if (info_ == NULL) {
    _slow_mutable_info();  }
  // @@protoc_insertion_point(field_mutable:content.Content.info)
  return info_;
}
inline ::content::ContentData* Content::release_info() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_info();
  } else {
    ::content::ContentData* temp = info_;
    info_ = NULL;
    return temp;
  }
}
inline void Content::set_allocated_info(::content::ContentData* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info != NULL) {
    _slow_set_allocated_info(message_arena, &info);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:content.Content.info)
}

// repeated .content.ContentPart parts = 2;
inline int Content::parts_size() const {
  return parts_.size();
}
inline void Content::clear_parts() {
  parts_.Clear();
}
inline const ::content::ContentPart& Content::parts(int index) const {
  // @@protoc_insertion_point(field_get:content.Content.parts)
  return parts_.Get(index);
}
inline ::content::ContentPart* Content::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:content.Content.parts)
  return parts_.Mutable(index);
}
inline ::content::ContentPart* Content::add_parts() {
  // @@protoc_insertion_point(field_add:content.Content.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::content::ContentPart >&
Content::parts() const {
  // @@protoc_insertion_point(field_list:content.Content.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::content::ContentPart >*
Content::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:content.Content.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// CmdResponse

// optional string path = 1;
inline void CmdResponse::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CmdResponse::path() const {
  // @@protoc_insertion_point(field_get:content.CmdResponse.path)
  return path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:content.CmdResponse.path)
}
inline void CmdResponse::set_path(const char* value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:content.CmdResponse.path)
}
inline void CmdResponse::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:content.CmdResponse.path)
}
inline ::std::string* CmdResponse::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:content.CmdResponse.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::release_path() {
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::unsafe_arena_release_path() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CmdResponse::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.CmdResponse.path)
}
inline void CmdResponse::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.CmdResponse.path)
}

// optional .common.Level level = 2;
inline void CmdResponse::clear_level() {
  level_ = 0;
}
inline ::common::Level CmdResponse::level() const {
  // @@protoc_insertion_point(field_get:content.CmdResponse.level)
  return static_cast< ::common::Level >(level_);
}
inline void CmdResponse::set_level(::common::Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:content.CmdResponse.level)
}

// optional string msg = 3;
inline void CmdResponse::clear_msg() {
  msg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CmdResponse::msg() const {
  // @@protoc_insertion_point(field_get:content.CmdResponse.msg)
  return msg_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  
  msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:content.CmdResponse.msg)
}
inline void CmdResponse::set_msg(const char* value) {
  
  msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:content.CmdResponse.msg)
}
inline void CmdResponse::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:content.CmdResponse.msg)
}
inline ::std::string* CmdResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:content.CmdResponse.msg)
  return msg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::release_msg() {
  
  return msg_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::unsafe_arena_release_msg() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return msg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.CmdResponse.msg)
}
inline void CmdResponse::unsafe_arena_set_allocated_msg(
    ::std::string* msg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      msg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:content.CmdResponse.msg)
}

// -------------------------------------------------------------------

// UpdatePart

// optional .content.ContentPart part = 1;
inline bool UpdatePart::has_part() const {
  return !_is_default_instance_ && part_ != NULL;
}
inline void UpdatePart::clear_part() {
  if (GetArenaNoVirtual() == NULL && part_ != NULL) delete part_;
  part_ = NULL;
}
inline const ::content::ContentPart& UpdatePart::part() const {
  // @@protoc_insertion_point(field_get:content.UpdatePart.part)
  return part_ != NULL ? *part_ : *default_instance_->part_;
}
inline ::content::ContentPart* UpdatePart::mutable_part() {
  
  if (part_ == NULL) {
    _slow_mutable_part();  }
  // @@protoc_insertion_point(field_mutable:content.UpdatePart.part)
  return part_;
}
inline ::content::ContentPart* UpdatePart::release_part() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_part();
  } else {
    ::content::ContentPart* temp = part_;
    part_ = NULL;
    return temp;
  }
}
inline void UpdatePart::set_allocated_part(::content::ContentPart* part) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete part_;
  }
  if (part != NULL) {
    _slow_set_allocated_part(message_arena, &part);
  }
  part_ = part;
  if (part) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:content.UpdatePart.part)
}

// optional uint32 position = 2;
inline void UpdatePart::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 UpdatePart::position() const {
  // @@protoc_insertion_point(field_get:content.UpdatePart.position)
  return position_;
}
inline void UpdatePart::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:content.UpdatePart.position)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_2eproto__INCLUDED
