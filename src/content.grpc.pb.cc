// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: content.proto

#include "content.pb.h"
#include "content.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace content {

static const char* ContentCmdHandler_method_names[] = {
  "/content.ContentCmdHandler/save",
  "/content.ContentCmdHandler/remove",
  "/content.ContentCmdHandler/removePart",
  "/content.ContentCmdHandler/updatePart",
};

std::unique_ptr< ContentCmdHandler::Stub> ContentCmdHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< ContentCmdHandler::Stub> stub(new ContentCmdHandler::Stub(channel));
  return stub;
}

ContentCmdHandler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_save_(ContentCmdHandler_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(ContentCmdHandler_method_names[0]))
  , rpcmethod_remove_(ContentCmdHandler_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(ContentCmdHandler_method_names[1]))
  , rpcmethod_removePart_(ContentCmdHandler_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(ContentCmdHandler_method_names[2]))
  , rpcmethod_updatePart_(ContentCmdHandler_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(ContentCmdHandler_method_names[3]))
  {}

::grpc::Status ContentCmdHandler::Stub::save(::grpc::ClientContext* context, const ::content::Content& request, ::content::CmdResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_save_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::content::CmdResponse>* ContentCmdHandler::Stub::AsyncsaveRaw(::grpc::ClientContext* context, const ::content::Content& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>(channel(), cq, rpcmethod_save_, context, request);
}

::grpc::Status ContentCmdHandler::Stub::remove(::grpc::ClientContext* context, const ::common::Uuid& request, ::content::CmdResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_remove_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::content::CmdResponse>* ContentCmdHandler::Stub::AsyncremoveRaw(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>(channel(), cq, rpcmethod_remove_, context, request);
}

::grpc::Status ContentCmdHandler::Stub::removePart(::grpc::ClientContext* context, const ::common::Uuid& request, ::content::CmdResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_removePart_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::content::CmdResponse>* ContentCmdHandler::Stub::AsyncremovePartRaw(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>(channel(), cq, rpcmethod_removePart_, context, request);
}

::grpc::Status ContentCmdHandler::Stub::updatePart(::grpc::ClientContext* context, const ::content::UpdatePart& request, ::content::CmdResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_updatePart_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::content::CmdResponse>* ContentCmdHandler::Stub::AsyncupdatePartRaw(::grpc::ClientContext* context, const ::content::UpdatePart& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>(channel(), cq, rpcmethod_updatePart_, context, request);
}

ContentCmdHandler::AsyncService::AsyncService() : ::grpc::AsynchronousService(ContentCmdHandler_method_names, 4) {}

ContentCmdHandler::Service::~Service() {
  delete service_;
}

::grpc::Status ContentCmdHandler::Service::save(::grpc::ServerContext* context, const ::content::Content* request, ::content::CmdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ContentCmdHandler::AsyncService::Requestsave(::grpc::ServerContext* context, ::content::Content* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status ContentCmdHandler::Service::remove(::grpc::ServerContext* context, const ::common::Uuid* request, ::content::CmdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ContentCmdHandler::AsyncService::Requestremove(::grpc::ServerContext* context, ::common::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status ContentCmdHandler::Service::removePart(::grpc::ServerContext* context, const ::common::Uuid* request, ::content::CmdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ContentCmdHandler::AsyncService::RequestremovePart(::grpc::ServerContext* context, ::common::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status ContentCmdHandler::Service::updatePart(::grpc::ServerContext* context, const ::content::UpdatePart* request, ::content::CmdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void ContentCmdHandler::AsyncService::RequestupdatePart(::grpc::ServerContext* context, ::content::UpdatePart* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* ContentCmdHandler::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ContentCmdHandler_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ContentCmdHandler::Service, ::content::Content, ::content::CmdResponse>(
          std::mem_fn(&ContentCmdHandler::Service::save), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ContentCmdHandler_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ContentCmdHandler::Service, ::common::Uuid, ::content::CmdResponse>(
          std::mem_fn(&ContentCmdHandler::Service::remove), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ContentCmdHandler_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ContentCmdHandler::Service, ::common::Uuid, ::content::CmdResponse>(
          std::mem_fn(&ContentCmdHandler::Service::removePart), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ContentCmdHandler_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ContentCmdHandler::Service, ::content::UpdatePart, ::content::CmdResponse>(
          std::mem_fn(&ContentCmdHandler::Service::updatePart), this)));
  return service_;
}


}  // namespace content

